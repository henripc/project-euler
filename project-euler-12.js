// Highly divisible triangular number

// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
// The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
//  10: 1,2,5,10
//  15: 1,3,5,15
//  21: 1,3,7,21
//  28: 1,2,4,7,14,28

// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

// --------------------

// Find all factors of an integer, then return the number of factors
// algorithm used => https://www.rookieslab.com/posts/most-efficient-way-to-find-all-factors-of-a-number-python-cpp
function numberOfFactors(number) {
    let numOfFactors = 2;
    
    for (let i = 1; i <= Math.sqrt(number); i++) {
        if (number % i === 0) numOfFactors += 2;
    }

    if (Math.sqrt(number) ** 2 === number) numOfFactors--;

    return numOfFactors;
}

let triangleNumber = 0;
for (let i = 1; triangleNumber < Number.MAX_SAFE_INTEGER; i++) {
    triangleNumber += i;
    if (numberOfFactors(triangleNumber) > 500) break;
}
console.log(triangleNumber);