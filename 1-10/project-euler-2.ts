// Even Fibonacci numbers

// Each new term in the Fibonacci sequence is generated by adding the privious two terms.
// By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million,
// find the sum of the even-valued terms.

// --------------------

// Creates the fibonacci sequence for the first n elements.
function fibonacciSeqNTerms(n: number): Array<number> {
    const fibSeq = [1, 2];

    for (let i = 2; i < n; i++) {
        fibSeq.push(fibSeq[i - 1] + fibSeq[i - 2]);
    }

    return fibSeq;
}

// Sums all even numbers for the given Fibonacci sequence.
// Except the first even number(2) all the others occur every 3 positions.
// ex.: for n = 20 we have 
// [1, 2 *, 3, 5, 8 *, 13, 21, 34 *, 55, 89, 144 *, 233, 377, 610 *, 987, 1597, 2584 *, 4181, 6765, 10946 *]
function sumOfAllEven(fibSeq: Array<number>): number {
    const LIMIT_NUMBER = 4_000_000;
    let result = 0;

    for (let i = 1; i < fibSeq.length; i += 3) {
        if (fibSeq[i] >= LIMIT_NUMBER) return result;
        result += fibSeq[i];
    }

    return result;
}

const n = 32;
const fibSeq = fibonacciSeqNTerms(n);
const answer = sumOfAllEven(fibSeq);
console.log(answer);