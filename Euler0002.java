import java.util.ArrayList;
import java.util.List;

/*
 * Even Fibonacci numbers
 * 
 * Each new term in the Fibonacci sequence is generated by adding the privious two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 */

public final class Euler0002 {
    public static void main(String[] args) {
        System.out.println(solution());
    }

    // Creates the fibonacci sequence for the first n elements.
    private static List<Integer> fibonacciSeqNTerms(final int number) {
        final List<Integer> fibSeq = new ArrayList<Integer>();
        fibSeq.add(1);
        fibSeq.add(2);

        for (int i = 2; i < number; i++) {
            fibSeq.add(fibSeq.get(i - 1) + fibSeq.get(i - 2));
        }

        return fibSeq;
    }

    // Sums all even numbers for the given Fibonacci sequence.
    // Except the first even number(2) all the others occur every 3 positions.
    // ex.: for n = 20 we have
    // [1, 2 *, 3, 5, 8 *, 13, 21, 34 *, 55, 89, 144 *, 233, 377, 610 *, 987, 1597, 2584 *, 4181, 6765, 10946 *]
    private static int sumOfAllEven(final List<Integer> fibSeq) {
        final int limit = 4_000_000;
        int result = 0;

        for (int i = 1; i < fibSeq.size(); i += 3) {
            if (fibSeq.get(i) >= limit) return result;
            result += fibSeq.get(i);
        }

        return result;
    }

    public static String solution() {
        final int n = 32;
        final List<Integer> fibSeq = fibonacciSeqNTerms(n);
        final int answer = sumOfAllEven(fibSeq);

        return Integer.toString(answer);
    }
}
